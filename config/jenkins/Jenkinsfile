pipeline {
    agent none
    environment {
        REGISTRY_URL = 'docker.io/timesnotrelative'
        DROPLET_IP   = '138.197.72.196'
        DROPLET_USER = 'root'
    }
    stages {
        stage('Checkout') {
            agent any
            steps {
                checkout scm
            }
        }
        
        stage('Validate & Test') {
            agent any
            steps {
                echo 'Running basic validation...'
                sh 'ls -la'
                sh 'test -f api/Dockerfile.prod || exit 1'
                sh 'test -f web/Dockerfile.prod || exit 1'
            }
        }
        
        stage('Build & Push Production Images') {
            agent any
            environment {
                DOCKER_CREDS = credentials('docker-creds')
            }
            steps {
                script {
                    def registry = env.REGISTRY_URL
                    def buildNum = env.BUILD_NUMBER
                    
                    sh "echo \$DOCKER_CREDS_PSW | docker login -u \$DOCKER_CREDS_USR --password-stdin"
                    
                    echo "Building API image..."
                    sh """
                        docker build -f api/Dockerfile.prod \
                            --build-arg NODE_ENV=production \
                            --build-arg API_VERSION=${buildNum} \
                            -t ${registry}/api-app:${buildNum} \
                            -t ${registry}/api-app:latest .
                    """
                    
                    echo "Building Web image..."
                    sh """
                        docker build -f web/Dockerfile.prod \
                            --build-arg VITE_API_URL=http://${DROPLET_IP}:3000 \
                            --build-arg VITE_GRAPHQL_URL=http://${DROPLET_IP}:3000/graphql \
                            -t ${registry}/web-app:${buildNum} \
                            -t ${registry}/web-app:latest .
                    """
                    
                    echo "Pushing images to registry..."
                    sh "docker push ${registry}/api-app:${buildNum}"
                    sh "docker push ${registry}/api-app:latest"
                    sh "docker push ${registry}/web-app:${buildNum}"
                    sh "docker push ${registry}/web-app:latest"
                    
                    echo "‚úÖ Docker build and push completed!"
                }
            }
        }
        
        stage('Deploy to Production') {
            agent any
            steps {  // FIXED: Removed the extra closing brace
                echo "üöÄ Starting deployment to ${env.DROPLET_IP}..."
                withCredentials([
                    sshUserPrivateKey(credentialsId: 'do-ssh-key', keyFileVariable: 'SSH_KEY'),
                    string(credentialsId: 'mongo-prod-user', variable: 'MONGO_USER'),
                    string(credentialsId: 'mongo-prod-pass', variable: 'MONGO_PASS')
                ]) {
                   sh """
    ssh -o StrictHostKeyChecking=no -i \$SSH_KEY ${env.DROPLET_USER}@${env.DROPLET_IP} '
        cd /app && 
        git fetch origin && 
        git reset --hard origin/main && 
        
        export TAG=${env.BUILD_NUMBER}
        export MONGO_ROOT_USER=${MONGO_USER}
        export MONGO_ROOT_PASSWORD=${MONGO_PASS}  # Changed from MONGO_ROOT_PASS
        
        docker-compose -f docker-compose.prod.yml pull && 
        docker-compose -f docker-compose.prod.yml up -d --remove-orphans && 
        
        echo "‚è≥ Waiting for services to start..." && 
        sleep 10 && 
        
        docker ps && 
        
        echo "üè• Checking API health..." && 
        curl -f http://localhost:3000/health || exit 1 && 
        echo "‚úÖ API is healthy!" && 
        
        echo "üè• Checking Web health..." && 
        curl -f http://localhost:8080 || exit 1 && 
        echo "‚úÖ Web is healthy!"
    '
"""
                }
                echo "‚úÖ Production deployment completed successfully!"
            }
        }
        
        stage('Post-Deploy Verification') {
            agent any
            steps {
                echo "üîç Verifying deployment..."
                sh """
                    echo "Testing API endpoint..."
                    curl -f http://${env.DROPLET_IP}:3000/health || exit 1
                    
                    echo "Testing Web endpoint..."
                    curl -f http://${env.DROPLET_IP}:8080 || exit 1
                    
                    echo "‚úÖ All endpoints responding!"
                """
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed! Check the logs.'
        }
        always {
    node('built-in') {  // Add the label
        echo 'üßπ Cleaning up...'
        sh 'docker system prune -f || true'
            }
        }
    }
}