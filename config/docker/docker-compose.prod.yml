# Production Docker Compose Configuration
# Deploy with: docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d

version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: passport-buddy-mongodb
    restart: unless-stopped
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-proddb}
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    image: timesnotrelative/passport-buddy-backend:${TAG:-latest}
    container_name: passport-buddy-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - API_HOST=${API_HOST:-138.197.72.196}
      - MONGO_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DB_NAME:-proddb}?authSource=admin
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - CORS_ORIGIN=${ALLOWED_ORIGINS}
      - MAILTRAP_TOKEN=${MAILTRAP_TOKEN}
      - MAILTRAP_ENDPOINT=${MAILTRAP_ENDPOINT:-https://send.api.mailtrap.io}
      - EMAIL_FROM=${EMAIL_FROM:-noreply@xbullet.me}
      - EMAIL_FROM_NAME=${EMAIL_FROM_NAME:-Passport Buddy}
      - ENABLE_SIGNUP=${ENABLE_SIGNUP:-true}
      - ENABLE_EMAIL_VERIFICATION=${ENABLE_EMAIL_VERIFICATION:-true}
      - ENABLE_GRAPHQL_PLAYGROUND=${ENABLE_GRAPHQL_PLAYGROUND:-false}
      - STORAGE_TYPE=${STORAGE_TYPE:-local}
      - UPLOAD_DIR=${UPLOAD_DIR:-./uploads}
      - UPLOAD_URL=${UPLOAD_URL:-https://www.xbullet.me/uploads}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-5242880}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - SESSION_SECRET=${SESSION_SECRET}
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Service
  frontend:
    image: timesnotrelative/passport-buddy-frontend:${TAG:-latest}
    container_name: passport-buddy-frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: MongoDB Express for database management
  # mongo-express:
  #   image: mongo-express
  #   container_name: passport-buddy-mongo-express
  #   restart: unless-stopped
  #   ports:
  #     - "8082:8081"
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
  #     ME_CONFIG_MONGODB_SERVER: mongodb
  #     ME_CONFIG_MONGODB_PORT: 27017
  #     ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME:-admin}
  #     ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-changeme}
  #   depends_on:
  #     - mongodb
  #   networks:
  #     - app_network

networks:
  app_network:
    driver: bridge
    name: passport_buddy_network

volumes:
  mongo_data:
    driver: local
    name: passport_buddy_mongo_data
  uploads:
    driver: local
    name: passport_buddy_uploads