# Passport Buddy - Project Structure

## Root Directory
/Users/beck/github/mern&flutter/

## Core Configuration Files
├── .env                           # Environment variables
├── docker-compose.yml            # Docker services configuration
├── Makefile                      # Build and deployment scripts
├── package.json                  # Root package configuration
└── README.md                     # Project documentation

## Backend (Node.js/Express/GraphQL)
backend/
├── package.json                  # Backend dependencies
├── Dockerfile.dev               # Development container
├── src/
│   ├── server.ts               # Main server entry point
│   ├── app.ts                  # Express app configuration
│   ├── config/
│   │   ├── db.ts              # MongoDB connection
│   │   └── env.ts             # Environment configuration
│   ├── controllers/
│   │   ├── auth.controller.ts  # Authentication logic
│   │   ├── post.controller.ts  # Post management
│   │   ├── user.controller.ts  # User management
│   │   ├── flight.controller.ts # Flight tracking
│   │   └── notification.controller.ts # Notifications
│   ├── models/
│   │   ├── User.ts            # User data model
│   │   ├── Post.ts            # Post data model
│   │   ├── Flight.ts          # Flight data model
│   │   ├── Comment.ts         # Comment data model
│   │   └── Notification.ts    # Notification model
│   ├── routes/
│   │   ├── auth.ts            # Authentication routes
│   │   ├── v1/
│   │   │   ├── auth.routes.ts
│   │   │   ├── post.routes.ts
│   │   │   ├── user.routes.ts
│   │   │   ├── flight.routes.ts
│   │   │   └── notification.routes.ts
│   │   └── graphql/
│   │       ├── schema.ts      # GraphQL schema
│   │       └── resolvers/
│   │           └── index.ts   # GraphQL resolvers
│   ├── middleware/
│   │   ├── auth.middleware.ts # JWT authentication
│   │   ├── upload.middleware.ts # File uploads
│   │   └── error-handler.ts   # Global error handling
│   ├── services/
│   │   ├── auth.service.ts    # Auth business logic
│   │   ├── post.service.ts    # Post operations
│   │   ├── email.service.ts   # Email notifications
│   │   ├── storage.service.ts # File storage
│   │   ├── notification.service.ts # Push notifications
│   │   ├── socket.service.ts  # Real-time updates
│   │   └── video.service.ts   # Video processing
│   ├── utils/
│   │   ├── logger.ts          # Logging utility
│   │   ├── boardingPassParser.ts # Flight data extraction
│   │   └── distanceCalculator.ts # Flight calculations
│   └── scripts/
│       ├── seed.ts            # Database seeding
│       └── stress-test-data-generator.ts # Testing data
└── __tests__/                   # Backend tests

## Frontend (React/Vite/TypeScript)
frontend/
├── package.json                 # Frontend dependencies
├── vite.config.ts              # Vite build configuration
├── tsconfig.json               # TypeScript configuration
├── Dockerfile.dev              # Development container
├── public/
│   ├── index.html              # HTML template
│   └── assets/                 # Static assets
└── src/
    ├── main.tsx                # React app entry point
    ├── App.tsx                 # Main app component
    ├── index.css               # Global styles
    ├── vite-env.d.ts          # Vite type definitions
    ├── components/
    │   ├── auth/
    │   │   ├── AuthPage.tsx    # Login/signup page
    │   │   ├── Login.tsx       # Login form
    │   │   ├── Register.tsx    # Registration form
    │   │   ├── OTPVerification.tsx # Email verification
    │   │   ├── ForgotPassword.tsx  # Password reset
    │   │   ├── AuthErrorScreen.tsx # Error handling
    │   │   └── FullPageSpinner.tsx # Loading states
    │   ├── feed/
    │   │   ├── Feed.tsx        # Main social feed
    │   │   ├── PostCard.tsx    # Individual posts
    │   │   ├── CreatePost.tsx  # Post creation
    │   │   └── MediaPreview.tsx # Image/video preview
    │   ├── flights/
    │   │   ├── FlightEditModal.tsx # Flight editing
    │   │   ├── FlightManualEntry.tsx # Manual flight entry
    │   │   └── AirportAutocomplete.tsx # Airport search
    │   ├── navigation/
    │   │   └── NavigationHeader.tsx # Top navigation
    │   ├── layout/
    │   │   ├── MainLayout.tsx  # App layout wrapper
    │   │   ├── AuthLayout.tsx  # Auth pages layout
    │   │   └── RightSidebar.tsx # Side navigation
    │   ├── common/
    │   │   ├── Toast.tsx       # Notification toasts
    │   │   ├── ConfirmDialog.tsx # Confirmation dialogs
    │   │   └── LocationPicker.tsx # Map integration
    │   ├── ui/
    │   │   ├── Button.tsx      # Reusable button
    │   │   ├── Avatar.tsx      # User avatars
    │   │   └── Icons.tsx       # Icon components
    │   └── dev/
    │       └── StressTestPanel.tsx # Development testing
    ├── pages/
    │   ├── Home.tsx            # Home/dashboard page
    │   ├── Profile.tsx         # User profiles
    │   ├── Flights.tsx         # Flight tracking
    │   ├── Explore.tsx         # Discovery page
    │   ├── Search.tsx          # Search functionality
    │   ├── Earth.tsx           # 3D globe view
    │   ├── Notifications.tsx   # User notifications
    │   └── TravelMap.tsx       # Travel visualization
    ├── contexts/
    │   ├── AuthContext.tsx     # Authentication state
    │   ├── ToastContext.tsx    # Toast notifications
    │   └── SocketContext.tsx   # WebSocket connection
    ├── services/
    │   ├── auth.service.ts     # Authentication API
    │   ├── post.service.ts     # Post operations
    │   ├── user.service.ts     # User management
    │   ├── flight.service.ts   # Flight tracking
    │   ├── notification.service.ts # Notifications
    │   └── socket.service.ts   # Real-time updates
    ├── hooks/
    │   ├── useAuth.ts          # Authentication hook
    │   ├── useFileUpload.ts    # File upload logic
    │   ├── useInfiniteScroll.ts # Pagination
    │   └── useOptimisticLikes.ts # UI optimizations
    ├── utils/
    │   ├── validation.ts       # Form validation
    │   ├── dateStrict.ts       # Date utilities
    │   ├── errors.ts           # Error handling
    │   └── stressTest.ts       # Performance testing
    ├── config/
    │   ├── apollo-client.ts    # GraphQL client
    │   └── api.config.ts       # API configuration
    ├── data/
    │   ├── airports.json       # Airport database
    │   └── airportCoordinates.ts # Location data
    ├── gql/
    │   └── generated.ts        # Generated GraphQL types
    └── tests/
        └── stress-test-components.test.tsx # Component tests

## Mobile (Flutter/Dart)
mobile/
├── pubspec.yaml               # Flutter dependencies
├── lib/
│   ├── main.dart             # Flutter app entry point
│   ├── core/
│   │   └── api/
│   │       └── api_config.dart # API configuration
│   ├── features/
│   │   └── auth/
│   │       └── data/
│   │           └── models/
│   │               └── flight.dart # Flight model
│   └── services/
│       └── flight_service.dart # Flight operations
└── test/
    ├── data_sync_test.dart   # Data synchronization tests
    ├── flight_model_test.dart # Model tests
    └── stress_test_comprehensive.dart # Performance tests

## Shared (TypeScript Types/Validation)
shared/
├── package.json              # Shared package config
├── tsconfig.json            # TypeScript configuration
└── src/
    ├── index.ts             # Shared exports
    ├── types/
    │   ├── user.types.ts    # User type definitions
    │   ├── comment.types.ts # Comment types
    │   └── flight.types.ts  # Flight types
    └── validation/
        ├── auth.schemas.ts  # Authentication validation
        └── post.schemas.ts  # Post validation schemas

## Configuration & Scripts
config/
├── .env.dev                 # Development environment
├── .env.prod               # Production environment
└── .env.example            # Environment template

scripts/
├── deploy/
│   ├── deploy-prod.sh      # Production deployment
│   └── rollback.sh         # Deployment rollback
├── health-checks/
│   ├── api-health-local.sh # API health monitoring
│   └── db-connectivity.sh  # Database checks
└── setup/
    └── setup-mobile-dev.sh # Mobile development setup

## Documentation
docs/
├── API_DOCUMENTATION.md     # API reference
├── DEVELOPMENT_GUIDE.md    # Development setup
└── DEPLOYMENT_DOCUMENTATION.md # Deployment guide

## Development Tools
├── .gitignore              # Git ignore rules
├── .eslintrc.js           # ESLint configuration
├── .prettierrc            # Code formatting
├── .husky/                # Git hooks
├── Jenkinsfile            # CI/CD pipeline
└── STRESS_TEST_DEMO.md    # Performance testing guide

## Key Features Implemented
- 🔐 JWT Authentication with email verification
- 📱 Social media feed with posts, comments, likes
- ✈️ Flight tracking with boarding pass OCR
- 🌍 Interactive travel mapping
- 🔔 Real-time notifications via WebSocket
- 📤 File uploads (images, videos, boarding passes)
- 🎯 Stress testing and performance monitoring
- 📊 GraphQL API with REST endpoints
- 🏗️ Docker containerization
- 🚀 CI/CD with Jenkins
- 📱 Cross-platform (Web + Mobile)

## Technology Stack
- **Backend**: Node.js, Express, GraphQL, MongoDB, Socket.IO
- **Frontend**: React, TypeScript, Vite, Apollo Client
- **Mobile**: Flutter, Dart
- **Database**: MongoDB with Mongoose ODM
- **Authentication**: JWT, bcrypt
- **File Storage**: DigitalOcean Spaces / Local storage
- **Email**: Mailtrap, Resend
- **Deployment**: Docker, Jenkins, DigitalOcean
- **Testing**: Jest, Vitest, Flutter test framework