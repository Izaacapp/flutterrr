pipeline {
    agent any
    
    environment {
        // Docker Registry
        REGISTRY = 'timesnotrelative'
        BACKEND_IMAGE = "${REGISTRY}/passport-buddy-backend"
        FRONTEND_IMAGE = "${REGISTRY}/passport-buddy-frontend"
        
        // Production Server
        PROD_SERVER = '138.197.72.196'
        PROD_USER = 'root'
        DEPLOY_PATH = '/app'
        
        // Build Info
        BUILD_TAG = "${BUILD_NUMBER}"
        GIT_COMMIT_SHORT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    echo "Building from branch: ${env.BRANCH_NAME}"
                    echo "Commit: ${GIT_COMMIT_SHORT}"
                }
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build Backend') {
                    steps {
                        script {
                            echo "Building Backend Docker image..."
                            sh """
                                docker build -f backend/Dockerfile.prod \
                                    --build-arg NODE_ENV=production \
                                    --build-arg BUILD_NUMBER=${BUILD_NUMBER} \
                                    --build-arg GIT_COMMIT=${GIT_COMMIT_SHORT} \
                                    -t ${BACKEND_IMAGE}:${BUILD_TAG} \
                                    -t ${BACKEND_IMAGE}:latest \
                                    . 
                            """
                        }
                    }
                }
                
                stage('Build Frontend') {
                    steps {
                        script {
                            echo "Building Frontend Docker image..."
                            sh """
                                docker build -f frontend/Dockerfile.prod \
                                    --build-arg VITE_API_URL=https://www.xbullet.me \
                                    --build-arg VITE_GRAPHQL_URL=https://www.xbullet.me/graphql \
                                    --build-arg VITE_WS_URL=wss://www.xbullet.me/graphql \
                                    -t ${FRONTEND_IMAGE}:${BUILD_TAG} \
                                    -t ${FRONTEND_IMAGE}:latest \
                                    . 
                            """
                        }
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-creds',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh """
                        echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin
                        
                        # Push Backend
                        docker push ${BACKEND_IMAGE}:${BUILD_TAG}
                        docker push ${BACKEND_IMAGE}:latest
                        
                        # Push Frontend
                        docker push ${FRONTEND_IMAGE}:${BUILD_TAG}
                        docker push ${FRONTEND_IMAGE}:latest
                        
                        docker logout
                    """
                }
            }
        }
        
        // Jenkinsfile

// ... (previous stages)

stage('Deploy to Production') {
    steps {
        // Load all the secrets from Jenkins credentials
        withCredentials([
            sshUserPrivateKey(credentialsId: 'do-ssh-key', keyFileVariable: 'SSH_KEY'),
            string(credentialsId: 'mongo-prod-user', variable: 'MONGO_USER'),
            string(credentialsId: 'mongo-prod-pass', variable: 'MONGO_PASS'),
            string(credentialsId: 'jwt-secret', variable: 'JWT_SECRET'),
            string(credentialsId: 'allowed-origins', variable: 'ALLOWED_ORIGINS'),
            string(credentialsId: 'session-secret', variable: 'SESSION_SECRET'),
            string(credentialsId: 'Passport-Buddy-Mailtrap', variable: 'MAILTRAP_TOKEN')
        ]) {
            sh """
                ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ${PROD_USER}@${PROD_SERVER} "bash -s" << EOF
                    # This entire script runs on the remote server
                    
                    # 1. Navigate to the deployment directory
                    cd ${DEPLOY_PATH}
                    
                    # 2. Create the .env.prod file from Jenkins secrets
                    echo "Creating production .env file..."
                    cat > .env.prod << ENV
# Production Environment Configuration - Generated by Jenkins
NODE_ENV=production
PORT=3000
API_HOST=${PROD_SERVER}

# === Database ===
MONGO_ROOT_USERNAME=${MONGO_USER}
MONGO_ROOT_PASSWORD=${MONGO_PASS}
MONGO_DB_NAME=passport_buddy_prod
MONGO_URI=mongodb://\${MONGO_ROOT_USERNAME}:\${MONGO_ROOT_PASSWORD}@mongodb:27017/\${MONGO_DB_NAME}?authSource=admin

# === Security ===
JWT_SECRET=${JWT_SECRET}
SESSION_SECRET=${SESSION_SECRET}
JWT_EXPIRES_IN=7d
JWT_COOKIE_EXPIRES_IN=7
BCRYPT_ROUNDS=12

# === CORS ===
ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
CORS_ORIGIN=https://www.xbullet.me,https://xbullet.me

# === Email ===
MAILTRAP_TOKEN=${MAILTRAP_TOKEN}
EMAIL_FROM=noreply@xbullet.me

# === Docker Tag ===
TAG=${BUILD_TAG}
ENV
                    
                    # 3. Pull the latest docker-compose.prod.yml from your repo (if needed)
                    # This assumes your compose file is in your git repo.
                    # You might need to checkout the code on the server if it's not already there.
                    # For now, we assume it's copied or present.
                    
                    # 4. Deploy using the new .env.prod file
                    echo "Deploying services with tag: ${BUILD_TAG}"
                    docker-compose -f docker-compose.prod.yml --env-file .env.prod pull
                    docker-compose -f docker-compose.prod.yml --env-file .env.prod down
                    docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
                    
                    echo "Waiting for services to start..."
                    sleep 30
                    
                    echo "Checking Backend health..."
                    curl -f http://localhost:3000/health || exit 1
                    
                    echo "Deployment completed successfully!"
EOF
            """
        }
    }
}

// ... (following stages)
        
        stage('Verify Deployment') {
            steps {
                script {
                    // Test the live endpoints
                    sh """
                        echo "Testing production endpoints..."
                        
                        # Test API
                        curl -f https://www.xbullet.me/health || exit 1
                        echo "✅ API is responding"
                        
                        # Test Frontend
                        curl -f https://www.xbullet.me || exit 1
                        echo "✅ Frontend is responding"
                        
                        # Test GraphQL
                        curl -f https://www.xbullet.me/graphql || exit 1
                        echo "✅ GraphQL is responding"
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo """
                ✅ Deployment Successful!
                Build: ${BUILD_NUMBER}
                Commit: ${GIT_COMMIT_SHORT}
                URL: https://www.xbullet.me
            """
        }
        
        failure {
            echo "❌ Deployment failed! Check the logs above."
        }
        
        always {
            // Cleanup workspace
            sh 'docker system prune -f || true'
            cleanWs()
        }
    }
}